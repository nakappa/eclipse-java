/*
EXCEÇÕES
		-> qualquer condição de erro ou comportamento inesperado encontrado por um programa em execução
		-> permite que erros sejam tratados de forma consistente e flexível, usando boas práticas
		-> em java, é um objeto herdado da classe:
			* java.lang.Exception - o compilador obriga a tratar ou propagar
			* java.lang.RuntimeException - o compilador não obriga a tratar ou propragar
			
		-> quando lançada, é propagada na pilha de chamadas de métodos em execução, até que seja capturada (tratada) ou o programa seja encerrado
		-> tem como vantagens:
			- delegar a lógica do erro para a classe responsável por conhecer as regras que podem ocasionar o erro
			- trata de forma organizada (inclusive hierárquica) exceções de tipos diferentes
			- a execução pode carregar dados quaisquer
			
ESTRUTURA TRY-CATCH-FINALLY
		
		BLOCO TRY -> contém o códico que representa a execução normal do trecho de código que pode acerretar em uma exceção
		
		BLOCO CATCH
					-> contém o código a ser executado caso uma exceção ocorra
					-> deve ser especificado o tipo de exceção a ser tratada (upcasting é permitido)
					
		BLOCO FINALLY
					-> contém código a ser executado independentemente de ter ocorrido ou não uma exceção
					-> exemplo clássico: fechar aquivo, conexão de banco de dados, ou outro recurso específico ao final do processamneto
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.InputMismatchException;
import java.util.Scanner;

public class excecoes {

	public static void main(String[] args) {

		//method3();
		

		System.out.println("End of program!");
	}

	/*public static void method1() {
		System.out.println("***METHOD1 START***");
		method2();
		System.out.println("***METHOD1 END***");
	}

	public static void method2() {
		System.out.println("***METHOD2 START***");
		Scanner sc = new Scanner(System.in);

		try {
			String[] vect = sc.nextLine().split(" ");
			int position = sc.nextInt();
			System.out.println(vect[position]);
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Invalid position");
			e.printStackTrace(); // mostra toda a chamada de métodos que acarreta a exceção
			sc.next();
		} catch (InputMismatchException e) {
			System.out.println("Input erro!");
		}
		sc.close();
		System.out.println("***METHOD2 END***");
	}

	public static void method3() {
		System.out.println("***METHOD3 START***");
		File file = new File("C\\temp\\in.txt");
		Scanner sc = null;

		try {
			sc = new Scanner(file);
			while (sc.hasNextLine()) {
				System.out.println(sc.nextLine());
			}
		} catch (FileNotFoundException e) {
			System.out.println("Error opening file: " + e.getMessage());
		} finally {
			if (sc != null)
				sc.close();
		}
		
		System.out.println("Finally block executed");
		System.out.println("***METHOD3 END***");
	}*/
}
